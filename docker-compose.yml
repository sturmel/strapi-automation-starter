services:
  # PostgreSQL - Base de données principale
  postgres:
    image: postgres:15
    container_name: postgres_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - automation_network

  # Redis - Cache et session store
  redis:
    image: redis:7-alpine
    container_name: redis_cache
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - automation_network

  # pgAdmin - Interface d'administration PostgreSQL
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - automation_network

  # NocoDB - Interface de base de données no-code
  nocodb:
    image: nocodb/nocodb:latest
    container_name: nocodb
    restart: unless-stopped
    environment:
      # Configuration principale de la base de données
      NC_DB: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${NOCODB_DB_NAME:-nocodb}"
      # Configuration Redis
      NC_REDIS_URL: "redis://redis:6379/1"
      # Configuration JWT et authentification
      NC_JWT_EXPIRES_IN: ${NC_JWT_EXPIRES_IN}
      NC_AUTH_JWT_SECRET: ${NC_AUTH_JWT_SECRET}
      NC_PUBLIC_URL: ${NC_PUBLIC_URL}
      NC_DISABLE_TELE: "true"
      # Variables supplémentaires pour forcer la configuration
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${NOCODB_DB_NAME}"
    volumes:
      - nocodb_data:/usr/app/data
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - redis
    networks:
      - automation_network

  # n8n - Workflow automation
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n_automation
    restart: unless-stopped
    environment:
      N8N_BASIC_AUTH_ACTIVE: "true"
      N8N_BASIC_AUTH_USER: ${N8N_BASIC_AUTH_USER}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_BASIC_AUTH_PASSWORD}
      N8N_HOST: ${N8N_HOST}
      N8N_PORT: 5678
      N8N_PROTOCOL: http
      WEBHOOK_URL: ${N8N_WEBHOOK_URL}
      GENERIC_TIMEZONE: ${TIMEZONE}
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${N8N_DB_NAME:-n8n}
      DB_POSTGRESDB_USER: ${POSTGRES_USER}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
      EXECUTIONS_DATA_SAVE_ON_ERROR: all
      EXECUTIONS_DATA_SAVE_ON_SUCCESS: all
      EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS: "true"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n/workflows:/home/node/.n8n/workflows
    ports:
      - "5678:5678"
    depends_on:
      - postgres
      - redis
    networks:
      - automation_network

  # Metabase - Analytics et reporting
  metabase:
    image: metabase/metabase:latest
    container_name: metabase_analytics
    restart: unless-stopped
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: ${METABASE_DB_NAME:-metabase}
      MB_DB_PORT: 5432
      MB_DB_USER: ${POSTGRES_USER}
      MB_DB_PASS: ${POSTGRES_PASSWORD}
      MB_DB_HOST: postgres
      MB_ENCRYPTION_SECRET_KEY: ${METABASE_ENCRYPTION_KEY}
      JAVA_TIMEZONE: ${TIMEZONE}
    volumes:
      - metabase_data:/metabase-data
    ports:
      - "3000:3000"
    depends_on:
      - postgres
    networks:
      - automation_network

  # SerpBear - Rank tracking
  serpbear:
    image: towfiqi/serpbear:latest
    container_name: serpbear_seo
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${SERPBEAR_DB_NAME:-serpbear}
      NEXTAUTH_SECRET: ${SERPBEAR_NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${SERPBEAR_NEXTAUTH_URL}
    volumes:
      - serpbear_data:/app/data
    ports:
      - "3001:3000"
    depends_on:
      - postgres
    networks:
      - automation_network

  # Strapi - CMS Headless
  strapi:
    container_name: strapi_cms
    build: ./html/strapi
    restart: unless-stopped
    environment:
      # Base de données PostgreSQL
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${STRAPI_DB_NAME}
      DATABASE_USERNAME: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      
      # Redis pour les sessions
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      
      # Configuration Strapi
      HOST: 0.0.0.0
      PORT: 1337
      APP_KEYS: ${STRAPI_APP_KEYS}
      JWT_SECRET: ${STRAPI_JWT_SECRET}
      ADMIN_JWT_SECRET: ${STRAPI_ADMIN_JWT_SECRET}
      API_TOKEN_SALT: ${STRAPI_API_TOKEN_SALT}
      TRANSFER_TOKEN_SALT: ${STRAPI_TRANSFER_TOKEN_SALT}
      
      # Environnement
      NODE_ENV: ${NODE_ENV}
      
      # Flags
      FLAG_NPS: "false"
      FLAG_PROMOTE_EE: "false"
    volumes:
      - strapi_app_data:/opt/app
      - ./html/strapi/public/uploads:/opt/app/public/uploads
    ports:
      - "1337:1337"
    networks:
      - automation_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:1337/_health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Nuxt 3 - Website Frontend
  website:
    container_name: nuxt_website
    build: ./docker/nuxt
    restart: unless-stopped
    environment:
      # Configuration Node.js
      NODE_ENV: ${NODE_ENV}
      NITRO_HOST: 0.0.0.0
      NITRO_PORT: 3000
      
      # Redis pour les sessions Nuxt (base 2)
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 2
      
      # Configuration API URLs
      STRAPI_URL: http://strapi:1337
      API_BASE_URL: http://localhost:1337
      
      # Configuration domaines
      DOMAIN_WEBSITE: ${DOMAIN_WEBSITE}
      DOMAIN_STRAPI: ${DOMAIN_STRAPI}
      DOMAIN_NOCODB: ${DOMAIN_NOCODB}
      DOMAIN_N8N: ${DOMAIN_N8N}
      DOMAIN_METABASE: ${DOMAIN_METABASE}
      DOMAIN_SERPBEAR: ${DOMAIN_SERPBEAR}
      DOMAIN_PGADMIN: ${DOMAIN_PGADMIN}
      
      # Configuration timezone
      TZ: ${TIMEZONE}
      TIMEZONE: ${TIMEZONE}
      
      # Base de données PostgreSQL
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      
      # Configuration Strapi
      STRAPI_API_TOKEN: ${STRAPI_API_TOKEN:-}
      
      # Google APIs
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_TAG: ${GOOGLE_ANALYTICS_PROPERTY_ID}
      GOOGLE_ANALYTICS_PROPERTY_ID: ${GOOGLE_ANALYTICS_PROPERTY_ID}
      GOOGLE_ADS_CUSTOMER_ID: ${GOOGLE_ADS_CUSTOMER_ID}
      
      # Brevo (ex-Sendinblue)
      BREVO_API_KEY: ${BREVO_API_KEY}
      BREVO_WEBHOOK_SECRET: ${BREVO_WEBHOOK_SECRET}
      
      # Réseaux Sociaux
      FACEBOOK_APP_ID: ${FACEBOOK_APP_ID}
      FACEBOOK_APP_SECRET: ${FACEBOOK_APP_SECRET}
      INSTAGRAM_ACCESS_TOKEN: ${INSTAGRAM_ACCESS_TOKEN}
      LINKEDIN_CLIENT_ID: ${LINKEDIN_CLIENT_ID}
      LINKEDIN_CLIENT_SECRET: ${LINKEDIN_CLIENT_SECRET}
      
      # IA et APIs
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GOOGLE_VERTEX_AI_PROJECT_ID: ${GOOGLE_VERTEX_AI_PROJECT_ID}
      GOOGLE_VERTEX_AI_LOCATION: ${GOOGLE_VERTEX_AI_LOCATION}
      
      # SerpBear
      SERPBEAR_API_KEY: ${SERPBEAR_API_KEY}
      
      # Configuration de session
      SESSION_SECRET: ${SESSION_SECRET:-nuxt-session-secret-key-change-in-production}
      
      # URLs de l'application
      WEBSITE_URL: http://localhost:3333
      WEBHOOK_URL: http://localhost:5678/webhook
    volumes:
      - ./html/website:/app
      - website_node_modules:/app/node_modules
    ports:
      - "3333:3000"
    networks:
      - automation_network
    depends_on:
      - redis
      - strapi
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s


volumes:
  postgres_data:
  redis_data:
  pgadmin_data:  
  nocodb_data:
  n8n_data:
  metabase_data:
  serpbear_data:
  strapi_app_data:
  website_node_modules:


networks:
  automation_network:
    driver: bridge
